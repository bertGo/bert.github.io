I" <h2 id="day-five719">DAY FIVE（7/19）</h2>

<h4 id="c-语言">C 语言</h4>

<ul>
  <li>指针<code class="highlighter-rouge">*</code> 指向的是一个值的内存的地址，
    <ul>
      <li><strong>int pt1=10;</strong></li>
      <li>**int &amp;pt2=pt1; 定义了pt2为pt1的引用。通过这样的定义，pt1和pt2表示共用同一对象地址，pt2就指向pt1的地址 **
        <ul>
          <li><strong>如果 pt3=pt1 ,则表示pt3在自身的地址上存储了一个为10的值</strong></li>
          <li><strong>两个的区别在于，如果pt1 所存储的值发生改变了，pt2也会随之发生改变，pt3不会</strong></li>
          <li></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="highlighter-rouge">the argc[%d] input value is %s \n",a,argc[a]</code> 在前面字符串规定的输入流，后面需要按照顺序给予相应的输出流</p>
  </li>
  <li>
    <p>使用一个新变量时需要先初始化变量类型</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">scanf( )</code>     输入控制</p>
  </li>
  <li>
    <p>printf() `</p>
  </li>
  <li>
    <p>输出控制符</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">stdin</code> 标准输入流，标准的输入设备默认键盘 <code class="highlighter-rouge">stdout</code> 标准输出流，标准的输出设备默认屏幕 <code class="highlighter-rouge">stderr</code> 标准错误流 ,只有程序出错时才会执行的流程</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">i</span><span class="p">);</span>  <span class="c1">//&amp;i 表示变量 i 的地址，&amp;是取地址符</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p><code class="highlighter-rouge">&amp;</code>是一个取地址运算符，<code class="highlighter-rouge">&amp;</code>后面加变量名表示“该变量的地址”，所以<code class="highlighter-rouge">&amp;i</code>就表示变量 i 的地址。<code class="highlighter-rouge">&amp;i</code>又称为“取地址i”，就相当于将数据存入以变量 i 的地址为地址的变量中。</p>
  </li>
  <li>
    <h4 id="在重定向中-标准的输入流是0-标准的输出流是1-标准的错误流是2-">在重定向中： 标准的输入流是0, 标准的输出流是1 ,标准的错误流是2 ;</h4>
  </li>
  <li>void 表示无类型  void*则表示无类型的指针，可以指向任何参数</li>
</ul>

<h4 id="linux">Linux</h4>

<ul>
  <li>
    <p>操作符echo <code class="highlighter-rouge">$?</code> 表示输出上一次执行的命令的返回值，在执行程序之后echo $?返回值为0就代表程序运行是没有问题的，1则代表遇到错误异常</p>
  </li>
  <li><code class="highlighter-rouge">&amp;&amp;</code> 左边的命令（命令1）返回真(即返回0，成功被执行）后，&amp;&amp;右边的命令（命令2）才能够被执行</li>
  <li>执行多个命令可以用 <code class="highlighter-rouge">;</code> 分开 各命令的执行结果不会影响其他命令的执行</li>
  <li><code class="highlighter-rouge">| |</code> 代表前面 命令执行失败后才去执行下一条命令</li>
  <li>如果dir2目录不存在，则可以直接使用
<code class="highlighter-rouge">cp -r dir1 dir2</code>
即可。
如果dir2目录已存在，则需要使用
<code class="highlighter-rouge">cp -r dir1/. dir2</code>
如果这时使用<code class="highlighter-rouge">cp -r dir1 dir2</code>,则也会将dir1目录复制到dir2中</li>
  <li>vim 按  v 进入可视化模式</li>
  <li>linux 命令模式 <code class="highlighter-rouge">u</code> 撤销上一个编辑操作</li>
  <li>重定向命令 ：
    <ul>
      <li>输出流<code class="highlighter-rouge">&gt; &gt;</code> 追加模式 ：代表不覆盖内容，有新内容继续往下方输入</li>
      <li>输出流<code class="highlighter-rouge">&gt;</code>   覆盖模式 ：代表新内容覆盖旧内容,也可以将命令结果输出到一个文件 :<code class="highlighter-rouge">ls /etc &gt; etc.txt</code></li>
      <li>输入流 <code class="highlighter-rouge">&lt;</code>  右边是按照程序输入的值写的文本</li>
    </ul>
  </li>
  <li>
    <p><code class="highlighter-rouge">grep</code> 可以查询文本文档内包含指定字符的文件名:grep  [选项]  ”模式“  [文件]</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;details&gt;</span>
			<span class="nt">&lt;summary&gt;&lt;mark&gt;&lt;font&gt;</span> grep 用法 <span class="nt">&lt;/font&gt;&lt;/mark&gt;&lt;/summary&gt;</span>
      
<span class="nt">&lt;p&gt;</span>
      -E ：开启扩展（Extend）的正则表达式。
　　-i ：忽略大小写（ignore case）。
　　-v ：反过来（invert），只打印没有匹配的，而匹配的反而不打印。
　　-n ：显示行号
　　-w ：被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker
　　-c ：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，注意如果同时使用-cv选项是显示有多少行没有被匹配到。
　　-o ：只显示被模式匹配到的字符串。
　　--color :将匹配到的内容以颜色高亮显示。
　　-A  n：显示匹配到的字符串所在的行及其后n行，after
　　-B  n：显示匹配到的字符串所在的行及其前n行，before
　　-C  n：显示匹配到的字符串所在的行及其前后各n行，context
    <span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/details&gt;</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>管道命令<code class="highlighter-rouge">|</code>  将</td>
          <td>左边的执行结果通过管道引流到右边 ：</td>
        </tr>
      </tbody>
    </table>

    <ul>
      <li><code class="highlighter-rouge">ls /etc/ | grep ab</code> :grep输出 etc下面所有文件名包含ab的文件</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">ps </code> 命令是查看进程的</li>
  <li>Linux 下的三种进程
    <ul>
      <li>交互式进程：一个由shell启动并控制的进程。交互式进程既可在前台也可在后台运行。</li>
      <li>批处理进程：与终端无关，安排在指定时刻完成的一系列进程。</li>
      <li>守护进程：在引导系统时起动，以执行即时的操作系统任务，如 lpd、inetd、named等。</li>
    </ul>
  </li>
</ul>

<h4 id="gcc">GCC</h4>

<ul>
  <li>
    <p>如果想用调试器执行一个可执行文件， 在用gcc编译时必须加上-g选项：</p>

    <p>gcc -o sum sum.c -g</p>
  </li>
  <li></li>
</ul>

<h4 id="gdb">GDB</h4>

<ul>
  <li>gdb 查看文件后，用list，继续显示后续代码
    <ul>
      <li>在此状态下 ，继续按enter 代表执行上一次代码</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">start</code> 代表单步调试</li>
  <li><code class="highlighter-rouge">n</code>  代表next 下一行</li>
  <li><code class="highlighter-rouge">p</code>  print  打印值</li>
  <li><code class="highlighter-rouge">s</code>  step 代表单步执行，在函数内遇到子函数时就进入并且继续单步执行 ;</li>
  <li><code class="highlighter-rouge">bt</code>  查看函数堆栈(查看都有哪些函数在执行，并给出函数内的值)，以及当前正在使用的函数(第一个就是)</li>
  <li><code class="highlighter-rouge">f</code>  加上执行bt命令显示出来 #后面的数字 ，就是切换堆栈</li>
</ul>
:ET