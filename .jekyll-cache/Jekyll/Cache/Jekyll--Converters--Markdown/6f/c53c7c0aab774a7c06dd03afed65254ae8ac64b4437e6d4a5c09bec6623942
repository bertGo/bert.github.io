I"<h1 id="726">7/26</h1>

<h3 id="nodejs">Node.js</h3>

<ul>
  <li>
    <p>对于以/开始的路径片段,pathjoin只是简单的将路径片段进行 拼接，而path.resolve将以/开始的路径片段作为i根目录，在此之前的路径将会被丢弃，就像是在linux中使用cd命令一样;</p>
  </li>
  <li>
    <p>path.resolve; 	url.parse</p>
  </li>
  <li>
    <p>在写文件服务器时，在终端运行文件代码后，是在后面传一个目录，而并不是传递一个目录下的文件夹：</p>

    <ul>
      <li>/home/abcd/php/Nodejs/  而不是/home/abcd/php/Nodejs/index.html</li>
    </ul>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>var root = path.resolve(process.argv[2]</td>
          <td> </td>
          <td>’.’); 就是设置文件服务器的根目录啊，process.argv[2]取出出来，/path/to/dir 就是process.argv[2]</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="nx">hash</span> <span class="err">加密：还可以使用更安全的</span><span class="nx">sha512</span><span class="err">算法</span>
<span class="c1">//获取加密模块</span>
<span class="kd">const</span> <span class="nx">crypto</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">//获取加密模块中的md5模块</span>
<span class="kd">const</span> <span class="nx">hash</span><span class="o">=</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="dl">'</span><span class="s1">md5</span><span class="dl">'</span><span class="p">);</span>
<span class="c1">//update()方法默认字符串编码为UTF-8，也可以传入Buffer。</span>
<span class="nx">hash</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello world6</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">//hash可以 更新</span>
<span class="nx">hash</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello 888</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hash</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">'</span><span class="s1">hex</span><span class="dl">'</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>hmac加密:Hmac算法也是一种哈希算法，它可以利用MD5或SHA1等哈希算法。不同的是，Hmac还需要一个密钥;只要密钥发生了变化，那么同样的输入数据也会发生变化。</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="kd">const</span> <span class="nx">crypto</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">crypto</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">hmac</span><span class="o">=</span><span class="nx">crypto</span><span class="p">.</span><span class="nx">createHmac</span><span class="p">(</span><span class="dl">'</span><span class="s1">sha256</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">crypto_key</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">hmac</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="dl">'</span><span class="s1">yanzhi</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hmac</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">));</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>crypto.createCipher(‘aes192’, key);第一个aes192是一种加密模式，有aes128;aes192;aes256;</p>
  </li>
  <li>
    <p>cipher.final([outputEncoding]):</p>

    <p>返回任何加密的内容。如果 <code class="highlighter-rouge">outputEncoding</code> 参数是<code class="highlighter-rouge">'latin1'</code>, <code class="highlighter-rouge">'base64'</code> 或者 <code class="highlighter-rouge">'hex'</code>，返回字符串。 如果没有提供 <code class="highlighter-rouge">outputEncoding</code>，则返回<a href="http://nodejs.cn/s/FP4oTy"><code class="highlighter-rouge">Buffer</code></a>。</p>

    <p>一旦<code class="highlighter-rouge">cipher.final()</code>方法已被调用， <code class="highlighter-rouge">Cipher</code> 对象就不能再用于加密数据。如果试图再次调用<code class="highlighter-rouge">cipher.final()</code>，将会抛出一个错误。</p>
  </li>
  <li>
    <p>decipher.final([outputEncoding]):
返回任何剩余的解密内容。如果<code class="highlighter-rouge">outputEncoding</code>参数是’latin1’，’ascii’或’utf8’之一，则返回一个字符串。 如果未提供输出编码，则返回<code class="highlighter-rouge">Buffer</code>。</p>

    <p>一旦调用了<code class="highlighter-rouge">decipher.final()</code>方法， <code class="highlighter-rouge">Decipher</code>对象就不能再用于解密数据。 试图不止一次调用<code class="highlighter-rouge">decipher.final()</code>会导致错误被抛出。</p>
  </li>
  <li>
    <p>一旦<code class="highlighter-rouge">cipher.final()</code>方法已被调用， <code class="highlighter-rouge">Cipher</code> 对象就不能再用于加密数据。如果试图再次调用<code class="highlighter-rouge">cipher.final()</code>，将会抛出一个错误。</p>
  </li>
  <li>
    <p>AES加密数据:cipher.update(data[,inputencoding,outputencoding]);</p>

    <p>方法规定了加密的字符data，以及加密字符的输入编码方式inputencoding 必须是 :’utf8’<code class="highlighter-rouge">, </code>‘ascii’<code class="highlighter-rouge">, 或者</code>‘latin1 ，以及解密这个字符需要用到的输出方式outputencoding  可以是<code class="highlighter-rouge">'latin1'</code>， <code class="highlighter-rouge">'base64'</code> 或者 <code class="highlighter-rouge">'hex'</code>。;
<code class="highlighter-rouge">cipher.update()</code>方法可以用新数据多次调用，直到<a href="http://nodejs.cn/s/e66XWC"><code class="highlighter-rouge">cipher.final()</code></a>被调用，outputencoding是加密数据的输出格式.</p>
  </li>
  <li>AES解密数据:decipher.update(data[,inputEncoding,outputEncoding);
对加密了的字符串data进行解密 ,如果给出inputEncoding参数，它的值必须是<code class="highlighter-rouge">latin1</code> ,<code class="highlighter-rouge">base64</code>,<code class="highlighter-rouge">hex</code> ，data是使用指定编码的字符串,如果未给出<code class="highlighter-rouge">outputEncoding</code> 是指定加密数据的输出格式，可以是<code class="highlighter-rouge">latin1</code> ,<code class="highlighter-rouge">ascii</code> 或者<code class="highlighter-rouge">utf8</code></li>
</ul>
:ET