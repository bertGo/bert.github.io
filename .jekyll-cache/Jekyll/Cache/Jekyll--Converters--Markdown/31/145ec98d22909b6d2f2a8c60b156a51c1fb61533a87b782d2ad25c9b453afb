I"8<h1 id="git提交命令">git提交命令</h1>

<p><code class="highlighter-rouge">git stash</code> 保存/储藏 git 工作状态和索引</p>

<p><code class="highlighter-rouge"> git push origin --delete Bert</code> 删除指定远程分支</p>

<p>恢复stash的两种操作：</p>

<ol>
  <li><code class="highlighter-rouge">git stash pop </code>恢复的同时把stash的内容也删了</li>
  <li><code class="highlighter-rouge">git stash apply </code>恢复后不会删除stash的内容 ，需要用 <code class="highlighter-rouge">git stash drop</code> 来删除</li>
</ol>

<p><code class="highlighter-rouge">git stash apply stash@{0}</code> 恢复指定的 stash</p>

<p><code class="highlighter-rouge">git tag </code> 查看已列出的标签</p>

<p><code class="highlighter-rouge">git show </code>  查看标签信息与对应的提交信息</p>

<p><code class="highlighter-rouge">git tag -a  &lt;version number&gt; </code>  创建附注标签 ：附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。  还需要备注 标签 信息</p>

<p><code class="highlighter-rouge">git push origin &lt;version number&gt; </code> 将本地的指定标签推送到远程仓库</p>

<p><code class="highlighter-rouge">git push origin --tags</code> 把所有不在远程仓库服务器上的标签全部传送到那里。</p>

<p><code class="highlighter-rouge">git tag &lt;version number&gt;</code>   创建一个轻量标签</p>

<p><code class="highlighter-rouge">git push origin :refs/tags/&lt;version  number&gt;</code> 删除远程标签，同时 也需要删除本地的标签</p>

<p><code class="highlighter-rouge">git status</code> 查看工作区和暂缓区的状态</p>

<p><code class="highlighter-rouge">git add &lt;文件名&gt; </code> 添加需要被上传的文件跟踪索引</p>

<p><code class="highlighter-rouge">git reset &lt;文件名&gt; </code> 取消被跟踪的文件</p>

<p><code class="highlighter-rouge">git commit  &lt;文件名&gt; </code> 命令用于将更改记录(提交)到存储库。将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中</p>

<p><code class="highlighter-rouge">git push </code>  命令用于将本地分支的更新，推送到远程主机</p>

<p><code class="highlighter-rouge">cp</code>  命令主要用于复制文件或目录。</p>

<ul>
  <li>
    <p>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</p>
  </li>
  <li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li>
  <li>-f：覆盖已经存在的目标文件而不给出提示。</li>
  <li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li>
  <li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li>
  <li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li>
  <li>-l：不复制文件，只是生成链接文件。</li>
</ul>

<p><code class="highlighter-rouge">git diff</code> 执行 git diff 来查看执行 git status 的结果的详细信息。</p>

<p><code class="highlighter-rouge">git reset --hard &lt;文件commit号&gt; </code>  回到过去or回到现在</p>

<p><code class="highlighter-rouge">git log --Graph</code>  rizhi 点线图</p>

<p><code class="highlighter-rouge">git log</code> 查看日志以及commit版本号</p>

<p><code class="highlighter-rouge">git reflog</code>  显示最近的日志以及版本号</p>

<p><code class="highlighter-rouge">git branch --set-upstream-to=origin/&lt;远程分支&gt;  &lt;本地分支&gt;</code>   设置本地分支和远程分支的跟踪</p>

<p><code class="highlighter-rouge">git branch -vv</code>  查看本地连接与远程连接的跟踪状态</p>

<p><code class="highlighter-rouge">git remote add origin &lt;项目地址&gt;</code>与远程仓库关联 ，初始化仓库后需要做的操作，否则没有办法push</p>

<p><code class="highlighter-rouge">git push --set-upstream origin &lt;远程分支名&gt;</code> 推送当前分支并建立与远程上游的跟踪,如果远程分支不存在默认 创建一个</p>

<p><code class="highlighter-rouge">git  branch -D &lt;本地分支名&gt;</code> 删除分支（即使没有合并）</p>

<p><code class="highlighter-rouge">git push origin &lt;远程分支名&gt;</code> 将分支推送到线上</p>

<p><code class="highlighter-rouge">git checkout  -b  branch-name  origin/branch-name</code>   在本地创建和远程分支对应的分支,本地分支和远程分支名最好一样</p>

<p><code class="highlighter-rouge">git checkout --file</code> 是将文件在工作区的修改全部撤销 如果提交了(commit)，就返回到暂存区的状态(add),如果没有提交，就返回到和版本库一样的状态</p>
:ET