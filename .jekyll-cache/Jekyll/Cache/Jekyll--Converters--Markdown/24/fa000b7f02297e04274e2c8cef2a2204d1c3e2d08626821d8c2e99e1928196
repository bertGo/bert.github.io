I"\<h2 id="day-four-718">Day Four （7/18）</h2>

<h3 id="git命令">git命令：</h3>

<ul>
  <li>**<code class="highlighter-rouge">git rebase  &lt;branch name&gt; </code> **文件的变基操作  ,提取指定文件做的修改和补丁，然后应用到本文件上形成一个新的提交，与合并不同的是，三方合并和变基生成的新提交内容是一致的，不同的是提交历史：三方合并能够清楚地看到合并的历史，而变基只有一条串联的历史。</li>
  <li><strong><code class="highlighter-rouge">git push origin HEAD:master</code></strong> 当本地分支与远程分支不同名时，用此命令上传</li>
  <li><strong><code class="highlighter-rouge"> git fetch origin master:fetch </code></strong> 这将这将更新名称为origin 的远程仓库上的分支： master ，并在本地创建 fetch 本地分支保存远端分支的所有数据。</li>
</ul>

<h3 id="git理解">git理解</h3>

<ul>
  <li>**git的rebase变基命令是将当前分支与目标分支的共同祖先做对比，将当前 分支提取出来附加到目标 分支的指针所在处形成一个新的版本，然后切换到目标分支进行合并，将指针移动过去 **</li>
  <li></li>
</ul>

<h4 id="c语言">C语言</h4>

<ul>
  <li>c语言包含的头文件声明中，用&lt;&gt;括起来表示操作系统已经预装的库，它会在系统目录下查找在环境变量中查找
    <ul>
      <li>用”“包含的相对路径 ，直接写文件名，代表在当前目录下查找</li>
    </ul>
  </li>
  <li>c语言中，printf(格式 控制,输出列表)，格式说明由“％”和格式字符组成，如％d％f等。它的作用是将输出的数据转换为指定的格式输出。格式说明总是由“％”字符开始的。不同类型的数据用不同的格式字符。
    <ul>
      <li>**%c            单个字符<br />
   %d              十进制有符号整数 
    %e             以“科学记数法”的形式输出十进制的浮点数  如2.451e+02
    %f              输出十进制浮点数，不带域宽时，保留6位小数
    %g             选用e或f格式中较短的一个输出十进制浮点数，不输出无效零
    %0             无输出无符号八进制整数
    %p             指针的值
    %s              输出字符串
    %u             输出无符号十进制整数 
    %x, %X          输出无符号十六进制整数 (不输出前缀Ox) **</li>
    </ul>
  </li>
  <li>c语言的入口文件是main函数，只有拥有main函数的文件才可以被执行</li>
  <li>c 程序需要先预编译，后输出</li>
  <li>后缀为.o的为目标文件，<strong>目标文件不可以执行</strong> ，引用也相当于执行一次文件，所以也不可以引用</li>
  <li>主程序内引用了目标文件的函数时，主程序内需要在头部声明一次函数体和返回值 :<code class="highlighter-rouge">int max(int a, int b)</code></li>
  <li>函数 头部 声明函数库方便后人查看函数的返回值和类型</li>
</ul>

<h4 id="linux-命令">Linux 命令</h4>

<ul>
  <li>编辑缓存区<strong>set nu</strong>  表示显示编辑内容后的行数</li>
  <li>编辑缓存区<strong>ctrl+w+上下箭头</strong>   切换双开文件的光标</li>
  <li>编辑缓存区<strong>sp 加文件名</strong> 打开或创建 另一个文件</li>
  <li>**gcc 需要编译的文件  -o 后跟编译输出文件的别名
    <ul>
      <li>-c 代表只进行编译</li>
    </ul>
  </li>
</ul>

<h4 id="make-工具">make 工具</h4>

<ul>
  <li>
    <p>使用make命令会自动寻找当前目录下的Makefile文件，根据内容进行编译</p>

    <ul>
      <li>
        <p>Makefile 内的文件采用递归的方法，直到所有的文件命令找齐后，才会开始执行</p>

        <ul>
          <li>
            <div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c">#hello.out 文件用到的文件
</span><span class="nl">hello.out</span><span class="o">:</span><span class="nf">max.o min.o hello.c</span>
	<span class="c">#生成hello.out</span>
	gcc max.o min.o hello.c <span class="nt">-o</span> hello.out
	<span class="c">#max.o 的依赖</span>
<span class="nl">max.o</span><span class="o">:</span><span class="nf">max.c</span>
	<span class="c">#max.o文件怎么来的呢？</span>
	gcc <span class="nt">-c</span> max.c
<span class="nl">min.o</span><span class="o">:</span><span class="nf">min.c</span>
	gcc <span class="nt">-c</span> min.c
</pre></td></tr></tbody></table></code></pre></div>            </div>
          </li>
          <li>
            <p>gcc命令前 必须要用TAB</p>

            <h1 id="end">END</h1>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

:ET